/*
 * Copyright (c) 2024 Linus Andera
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import de.linusdev.cvg4j.build.CPPBuildType
import de.linusdev.cvg4j.build.FileDownloader
import de.linusdev.cvg4j.build.codegen.VulkanXMLGeneratorTask
import de.linusdev.cvg4j.glslc.GlslCTask
import de.linusdev.lutils.version.ReleaseType
import de.linusdev.lutils.version.Version

import java.nio.file.Paths

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'de.linusdev.cvg4j.glslc' version '+'
    id 'de.linusdev.lutils.gradle' version '+'
    id 'CMakeRunnerPlugin'
}

def engineVersion = Version.of(ReleaseType.valueOf(engine_release_type), engine_version)

group 'de.linusdev'
version engineVersion.version().asUserFriendlyString;

CPPBuildType buildType = CPPBuildType.MSVC_DEBUG
targetCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = 'UTF-8'

def downloadVKTask = tasks.register("downloadVk.xml", FileDownloader.class) {
    url "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/main/xml/vk.xml"
}

def downloadVKVideoTask = tasks.register("downloadVkVideo.xml", FileDownloader.class) {
    url "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/main/xml/video.xml"
}

def generateVulkanFromXML = tasks.register("genFromVulkanXML", VulkanXMLGeneratorTask.class) {
    basePackage = "de.linusdev.cvg4j.nat"
    vulkanXmlFile = downloadVKTask
    vulkanVideoXmlFile = downloadVKVideoTask
}

def glslCTestTask = tasks.<GlslCTask>register("glslCTest", GlslCTask.class) {
    shaderLocation = Paths.get('src/test/glsl/test/')
    compiledShadersRootResourcesPackage = 'de.linusdev.cvg4j.vulkan.shaders'
}

processTestResources.dependsOn(glslCTestTask)
processResources.dependsOn(glslCTestTask)

processTestResources.dependsOn(glslc)
processResources.dependsOn(glslc)

constantGen {
    basePackage = "de.linusdev.cvg4j"
    add("ENGINE_VERSION", engineVersion)
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    main {
        java {
            srcDir(generateVulkanFromXML)
        }
    }
    test {
        resources {
            srcDirs(glslCTestTask)
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    title = "CVG4J"

    configure(options) {
        tags(
                'implNote:a:Implementation Note:',
                'implSpec:a:Implemenatation Requirements:',
                'apiNote:a:API Note:',
                'cvg4j.addedByExtension:a:Added By Extension:',
                'cvg4j.vk.optional:a:Optional',
                'cvg4j.vk.noAutoValidity:a:NoAutoValidity',
                'cvg4j.vk.limitType:a:LimitType',
                'cvg4j.vk.len:a:Len',
                'cvg4j.cDef:a:C-Definition'
        )
    }
}

test {
    jvmArgs '-XX:+CreateCoredumpOnCrash';
}

repositories {
    mavenLocal()
    mavenCentral()
}

def cnlTask = tasks.register('copy-native-libraries') {
}.get()
tasks.named("build").get().dependsOn(cnlTask)

tasks.register("testWithRenderDoc", Exec.class) {
    def javaHome = System.properties['java.home']

    commandLine = [
            "C:\\Program Files\\RenderDoc\\renderdoccmd.exe",
            "capture",
            "--opt-hook-children",
            "--wait-for-exit",
            "--working-dir",
            ".",
            "$javaHome/bin/java.exe",
            "-Xmx64m",
            "-Xms64m",
            "-Dorg.gradle.appname=gradlew",
            "-Dorg.gradle.java.home=$javaHome",
            "-classpath",
            "gradle/wrapper/gradle-wrapper.jar",
            "org.gradle.wrapper.GradleWrapperMain",
            ":test",
            "--tests",
            "\"de.linusdev.cvg4j.engine.vk.VulkanEngineTest.test\""
    ]

}

dependencies {
    api 'de.linusdev:lutils:2.0.0'
    implementation 'de.linusdev:llog:1.0.2'
    api 'org.jetbrains:annotations:24.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
    workingDir = "/wd/"
}

publishing {
    publications {

        CVG4J(MavenPublication) {
            artifactId = 'cvg4j'
            from components.java
            pom {
                name = 'CVG4J'
                description = ''
                url = 'https://www.linusdev.de'
                groupId = 'de.linusdev'
                version = project.version

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'linusdev'
                        name = 'Linus Andera'
                        email = 'linus@linusdev.de'
                        organizationUrl = 'https://www.linusdev.de'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/lni-dev/CLGLJava.git'
                    developerConnection ='scm:git:ssh://github.com:lni-dev/CLGLJava.git'
                    url = 'https://github.com/lni-dev/CLGLJava/tree/master'
                }
            }
        }
    }
}